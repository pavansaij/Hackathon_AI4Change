from __future__ import division
import dlib
import cv2
from array import *
from imutils import face_utils
import numpy as np
import imutils


predictor_path = r"C:\Users\itspr\Anaconda3\pkgs\dlib-19.4-np113py36_201\info\recipe\shape_predictor_68_face_landmarks.dat"
path = "F:\\Hackathon_AI4\\Test_Cases\\"
imgpath =  path + "T1-2.JPG"

def face_remap(shape):
    remapped_image = cv2.convexHull(shape)
    return remapped_image

def resize(img, width=None, height=None, interpolation=cv2.INTER_AREA):
    global ratio
    w, h = img.shape
    print("wd",w)
    print("ht",h)

    if width is None and height is None:
        return img
    elif width is None:
        ratio = height / h
        width = int(w * ratio)
        resized = cv2.resize(img, (height, width), interpolation)
        return resized
    else:
        ratio = width / w
        height = int(h * ratio)
        resized = cv2.resize(img, (height, width), interpolation)
        return resized

def shape_to_np(shape, dtype="int"):
    # initialize the list of (x, y)-coordinates
    coords = np.zeros((68, 2), dtype=dtype)

    # loop over the 68 facial landmarks and convert them
    # to a 2-tuple of (x, y)-coordinates
    for i in range(0, 68):
        coords[i] = (shape.part(i).x, shape.part(i).y)

    # return the list of (x, y)-coordinates
    return coords

predictor_path = r"C:\Users\itspr\Anaconda3\pkgs\dlib-19.4-np113py36_201\info\recipe\shape_predictor_68_face_landmarks.dat"

detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor(predictor_path)


frame = cv2.imread(imgpath)
frame_grey = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
frame_resized = resize(frame_grey, width=120)
print("R",ratio)

# Ask the detector to find the bounding boxes of each face. The 1 in the
# second argument indicates that we should upsample the image 1 time. This
# will make everything bigger and allow us to detect more faces.
dets = detector(frame_resized, 1)
if len(dets) > 0:
    for k, d in enumerate(dets):
        # determine the facial landmarks for the face region, then
        # convert the facial landmark (x, y)-coordinates to a NumPy array
        shape = predictor(frame_resized, d)
        shape = shape_to_np(shape)
        i = 1
        for (x, y) in shape:
            if i == 19:
                x1 = int(x/ratio)
                y1 = int(y/ratio)-5
            if i == 26:
                x2 = int(x/ratio)
                y2 = int(y/ratio) - 53
            cv2.circle(frame, (int(x/ratio), int(y/ratio)), 1 , (255, 125, 110), -1)
            i = i+1
        print(x1," ",y1)
        print(x2," ",y2)
        crop_fh = frame[y2:y1, x1:x2]
        print(crop_fh)
        #crop_fh = imutils.resize(crop_fh, width=170, inter=cv2.INTER_CUBIC)

cv2.imshow("image", frame)
cv2.imshow("fh", crop_fh)
cv2.waitKey(50000)
