from __future__ import division
import dlib
import cv2
from array import *
from imutils import face_utils
import numpy as np
import imutils
import webcolors

def face_remap(shape):
    remapped_image = cv2.convexHull(shape)
    return remapped_image

def convex_hull(shape,image):
    shape = np.array(shape,dtype="int")
    out_face = np.zeros_like(image)
    remapped_shape = np.zeros_like(shape) 
    feature_mask = np.zeros((image.shape[0], image.shape[1]))   
    remapped_shape = face_remap(shape)
    cv2.fillConvexPoly(feature_mask, remapped_shape[0:27], 1)
    feature_mask = feature_mask.astype(np.bool)
    out_face[feature_mask] = image[feature_mask]
    return out_face

def closest_colour(requested_colour):
    min_colours = {}
    for key, name in webcolors.css3_hex_to_names.items():
        r_c, g_c, b_c = webcolors.hex_to_rgb(key)
        rd = (r_c - requested_colour[0]) ** 2
        gd = (g_c - requested_colour[1]) ** 2
        bd = (b_c - requested_colour[2]) ** 2
        min_colours[(rd + gd + bd)] = name
    return min_colours[min(min_colours.keys())]

def get_colour_name(requested_colour):
    try:
        closest_name = actual_name = webcolors.rgb_to_name(requested_colour)
    except ValueError:
        closest_name = closest_colour(requested_colour)
        actual_name = None
    return actual_name, closest_name

def Find_Color(roi):
    avg_color_per_row = np.average(roi, axis=0)
    avg_color = np.average(avg_color_per_row, axis=0)	
    rgb = [0,0,0]
    rgb[0] = avg_color[2]
    rgb[1] = avg_color[1]
    rgb[2] = avg_color[0]
    print(rgb)
    actual_name, closest_name = get_colour_name(rgb)
    print("Actual colour name:", actual_name, " closest colour name:", closest_name)
    
def crop_pts(xy, frame):
    pts = np.array(xy, dtype=np.int32)
    rect = cv2.boundingRect(pts)
    x,y,w,h = rect
    croped = frame[y:y+h, x:x+w]
    return croped

def wrinkle_density(img):
    pxl_cnt = 0
    wht_cnt = 0
    for od in img:
        for pxl in od:
            if pxl == 255:
                wht_cnt = wht_cnt+1
            pxl_cnt = pxl_cnt+1
    return wht_cnt/pxl_cnt

def resize(img, width=None, height=None, interpolation=cv2.INTER_AREA):
    global ratio
    w, h = img.shape
    if width is None and height is None:
        return img
    elif width is None:
        ratio = height / h
        width = int(w * ratio)
        resized = cv2.resize(img, (height, width), interpolation)
        return resized
    else:
        ratio = width / w
        height = int(h * ratio)
        resized = cv2.resize(img, (height, width), interpolation)
        return resized

def shape_to_np(shape, dtype="int"):
    # initialize the list of (x, y)-coordinates
    coords = np.zeros((68, 2), dtype=dtype)

    # loop over the 68 facial landmarks and convert them
    # to a 2-tuple of (x, y)-coordinates
    for i in range(0, 68):
        coords[i] = (shape.part(i).x, shape.part(i).y)

    # return the list of (x, y)-coordinates
    return coords

predictor_path = r"C:\Users\itspr\Anaconda3\pkgs\dlib-19.4-np113py36_201\info\recipe\shape_predictor_68_face_landmarks.dat"
path = "F:\\Hackathon_AI4\\Test_Cases\\"
imgpath =  path + "T8-1.JPG"

crowfeet1 = [1,18,2,37]
crowfeet2 = [27,17,46,16]
eye_bag1  = [1,37,40,32,3]
eye_bag2  = [17,46,43,36,15]
teeth = [61,62,63,64,65,66,67,68]
mouth = [49,50,51,52,53,54,55,56,57,58,59,60]
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor(predictor_path)
frame = cv2.imread(imgpath)
cpy = frame.copy()
frame_grey = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
frame_resized = resize(frame_grey, width=120)

# Ask the detector to find the bounding boxes of each face. The 1 in the
# second argument indicates that we should upsample the image 1 time. This
# will make everything bigger and allow us to detect more faces.
dets = detector(frame_resized, 1)
if len(dets) > 0:
    for k, d in enumerate(dets):
        # determine the facial landmarks for the face region, then
        # convert the facial landmark (x, y)-coordinates to a NumPy array
        shape = predictor(frame_resized, d)
        shape = shape_to_np(shape)
        i = 1
        cf1 = []
        c1 = 0
        cf2 = []
        c2 = 0
        eb1 = []
        e1 = 0
        eb2 = []
        e2 = 0
        mth = []
        m = 0   
        tth = []
        t = 0
        shape2 = []
        s = 0
        for (x, y) in shape:
            shape2.insert(s,[int(x/ratio),int(y/ratio)])    
            if i in teeth:
                tth.insert(t,[int(x/ratio),int(y/ratio)])
                t = t+1
            if i in mouth:
                mth.insert(c2,[int(x/ratio),int(y/ratio)])
                m = m+1
            if i in crowfeet2:
                cf2.insert(c2,[int(x/ratio),int(y/ratio)])
                c2 = c2+1
            if i in crowfeet1:
                cf1.insert(c1,[int(x/ratio),int(y/ratio)])
                c1 = c1+1
            if i == 19:
                x1 = int(x/ratio)
                y1 = int(y/ratio)-5
            if i == 26:
                x2 = int(x/ratio)
                y2 = int(y/ratio) - 53
            if i in eye_bag1:
                eb1.insert(e1,[int(x/ratio),int(y/ratio)])
                e1 = e1+1
            if i in eye_bag2:
                eb2.insert(e2,[int(x/ratio),int(y/ratio)])
                e2 = e2+1
            cv2.circle(frame, (int(x/ratio), int(y/ratio)), 1 , (255, 125, 110), -1)
            i = i+1
            s = s+1
        fh  = frame[y2:y1, x1:x2]
        cf1 = crop_pts(cf1,cpy)
        cf2 = crop_pts(cf2,cpy)
        eb1 = crop_pts(eb1,cpy)
        eb2 = crop_pts(eb2,cpy)
        mth = crop_pts(mth,cpy)
        tth = convex_hull(tth,cpy)
        

cv2.imshow("mouth", mth)
cv2.imshow("image", frame)
cv2.imshow("tth",tth)
Find_Color(tth)
Find_Color(mth)
'''
cv2.imshow("image", frame)
cv2.imshow("forehead_",fh)
cv2.imshow("crowfeet1",cf1)
cv2.imshow("crowfeet2",cf2)
cv2.imshow("eyebag1",eb1)
cv2.imshow("eyebag2",eb2)
'''

fcn   = cv2.Canny(fh,  90, 40, L2gradient=False)
cf1cn = cv2.Canny(cf1, 95, 50, L2gradient=False)
cf2cn = cv2.Canny(cf2, 95, 50, L2gradient=False)
eb1cn = cv2.Canny(eb1, 95, 50, L2gradient=False)
eb2cn = cv2.Canny(eb2, 95, 50, L2gradient=False)

print("forehead: ",wrinkle_density(fcn))
print("crowfeet1: ",wrinkle_density(cf1cn))
print("crowfeet2: ",wrinkle_density(cf2cn))
print("eyebag1: ",wrinkle_density(eb1cn))
print("eyebag2: ",wrinkle_density(eb2cn))

cv2.waitKey(20000)
cv2.destroyAllWindows()
