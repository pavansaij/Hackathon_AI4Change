from imutils import face_utils
import imutils
import numpy as np
import collections
import dlib
import cv2

def face_remap(shape):
    remapped_image = cv2.convexHull(shape)
    return remapped_image

"""
MAIN CODE STARTS HERE
"""
# load the input image, resize it, and convert it to grayscale
landmarks = ["mouth","right_eyebrow","left_eyebrow","right_eye","left_eye","nose"]
path = "F:\\Hackathon_AI4\\Test_Cases\\"
imgpath =  path + "T3-2.JPG"
image = cv2.imread(imgpath)
image = imutils.resize(image, width=500)
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
SHAPE_PREDICTOR = r"C:\Users\itspr\Anaconda3\pkgs\dlib-19.4-np113py36_201\info\recipe\shape_predictor_68_face_landmarks.dat"
out_face = np.zeros_like(image)

# initialize dlib's face detector (HOG-based) and then create the facial landmark predictor
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor(SHAPE_PREDICTOR)

# detect faces in the grayscale image
rects = detector(gray, 1)

# loop over the face detections
for (i, rect) in enumerate(rects):
   """
   Determine the facial landmarks for the face region, then convert the facial landmark (x, y)-coordinates to a NumPy array
   """
   shape = predictor(gray, rect)
   shape = face_utils.shape_to_np(shape)
   remapped_shape = np.zeros_like(shape) 
   feature_mask = np.zeros((image.shape[0], image.shape[1]))   

   # we extract the face
   remapped_shape = face_remap(shape)
   cv2.fillConvexPoly(feature_mask, remapped_shape[0:27], 1)
   feature_mask = feature_mask.astype(np.bool)
   out_face[feature_mask] = image[feature_mask]
   out = out_face.copy()
   for (name, (i, j)) in face_utils.FACIAL_LANDMARKS_IDXS.items():
       if name in landmarks:
            (x, y, w, h) = cv2.boundingRect(np.array([shape[i:j]]))
            out_face[y:y + h, x:x + w] = [0, 0 , 0]

   cv2.imshow("out", out_face)
   L1 = cv2.Canny(out_face, 80, 50, L2gradient=False)
   cv2.imshow("Canny", L1)
   cv2.waitKey(20000)


